topLevel            ::= {topLevelElem}

topLevelElem        ::= inventario | defFuncao

inventario          ::= PC-inventario '‚õèÔ∏è' { (declaraVarTipo | declaraVarVetorTipo | definicaoEnum) } '‚¨õ'

defFuncao           ::= (assinaturaFuncao | assinaturaProced) '‚õèÔ∏è' listaComandos '‚¨õ'

assinaturaFuncao    ::= tipo PC-craftingTable identificador '(' argumentos ')'
assinaturaProced    ::= PC-vazio PC-enchantingTable identificador '(' argumentos ')'

chamadaFuncao       ::= PC-craftingTable identificador '(' parametros ')' ';'
chamadaProcedimento ::= PC-enchantingTable identificador '(' parametros ')' ';'

declaraVarTipo      ::= tipo identificador ([atribuicao] | ';')

declaraVarVetorTipo ::= tipo identificador '[' inteiro ']' ';'

variavel            ::= (identificador | vetor)

atribuiVar          ::= variavel atribuicao

atribuicao          ::= '=' listaExpressoes ';'

argumentos          ::= argumento {',' argumento} (* argumentos da declara√ß√£o de fun√ß√µes *)
argumento           ::= tipo variavel

parametros          ::= parametro {',' parametro} (* parametros a serem passados para fun√ß√µes *)
parametro           ::= expr



(* EXPRESSOES *)

listaExpressoes     ::= expr {',' expr}

expr                ::= exprLogico
exprLogico          ::= exprRelacional {opLogico exprRelacional}
exprRelacional      ::= exprAritmetico {opRelacional exprAritmetico}
exprAritmetico      ::= fator {opAritmetico fator}

fator               ::= '(' expr ')'
                    | chamadaFuncao
                    | double
                    | inteiro
                    | booleano
                    | null
                    | string
                    | char
                    | float

opAritmetico        ::= '+' | '‚öíÔ∏è' 
                    | '-' | '‚öîÔ∏è'
                    | '*' | 'üí£'
                    | '/' | 'ü™£'
                    | '%' | 'ü™µ'

opRelacional        ::= '==' | 'üß±üß±'
                    | '!=' | 'üß±‚¨ú'
                    | '<' | 'üîΩü™ú'
                    | '>' | 'üîºü™ú'
                    | '<=' | 'üß±üîΩ'
                    | '>=' | 'üß±üîº'

opLogico            ::= 'E' | 'üì¶'
                    | 'OU' | 'ü™®'

(* COMANDOS *)

listaComandos       ::= {comando}

comando             ::= Com-repetidor  (* for *)
                    | Com-observador   (* if *)
                    | Com-comparador   (* while *)
                    | Com-redstone     (* do-while *)
                    | Com-end          (* break *)
                    | Com-pular        (* continue *)
                    | Com-overworld    (* return *)
                    | Com-villager     (* typecast *)
                    | Com-carrinho     (* switch *)
                    | Com-atribuicao
                    | Com-minerar      (* ++ *)
                    | Com-colocarBloco (* -- *)
                    | Com-regenerar    (* += *)
                    | Com-veneno       (* -= *)
                    | Com-creeper      (* *= *)
                    | Com-bloco        (* Comando especial *)
                    | chamadaProcedimento

Com-repetidor       ::= PC-repetidor '(' [declaraVarTipo] ';' listaExpressoes ';' listaExpressoes ')' '‚õèÔ∏è' listaComandos '‚¨õ'

Com-observador      ::= PC-observador '(' listaExpressoes ')' '‚õèÔ∏è' listaComandos '‚¨õ' { PC-liberador ['(' listaExpressoes ')'] '‚õèÔ∏è' listaComandos '‚¨õ' }

Com-comparador      ::= PC-comparador '(' listaExpressoes ')' '‚õèÔ∏è' listaComandos '‚¨õ'

Com-redstone        ::= PC-redstone '‚õèÔ∏è' listaComandos '‚¨õ' PC-comparador '(' listaExpressoes ')'

Com-end             ::= PC-end ';'

Com-pular           ::= PC-pular ';'

Com-overworld       ::= PC-overworld expr ';'

Com-villager        ::= PC-villager '(' variavel ',' tipo')'    (* acho que teremos tipos aqui *)

trilhos             ::= PC-trilho expr '‚õèÔ∏è' listaComandos '‚¨õ'
Com-carrinho        ::= PC-carrinho '‚õèÔ∏è' trilhos {trilhos} PC-cacto '‚õèÔ∏è' listaComandos '‚¨õ'

Com-atribuicao      ::= atribuiVar

Com-minerar         ::= PC-minerar '(' variavel ')' ';'

Com-colocarBloco    ::= PC-colocarBloco '(' variavel ')' ';'

Com-regenerar       ::= PC-regenerar '(' variavel ',' numero ')' ';'

Com-veneno          ::= PC-veneno '(' variavel ',' numero ')' ';'

Com-creeper         ::= PC-creeper '(' variavel ',' numero ')' ';'

Com-bloco           ::= PC-bloco '{' parametros '}' opAritmetico numero ';'


(* PALAVRAS CHAVE *)

PC-repetidor        ::= "repetidor"
PC-observador       ::= "observador"
PC-comparador       ::= "comparador"
PC-liberador        ::= "liberador"
PC-redstone         ::= "redstone"
PC-end              ::= "end"
PC-pular            ::= "pular"
PC-overworld        ::= "overworld"
PC-villager         ::= "villager"
PC-carrinho         ::= "carrinho"
PC-trilho           ::= "trilho"
PC-cacto            ::= "cacto"
PC-craftingTable    ::= "crafting_table"
PC-enchantingTable  ::= "enchanting_table"
PC-vazio            ::= "vazio"
PC-minerar          ::= "minerar"
PC-colocarBloco     ::= "colocar_bloco"
PC-regenerar        ::= "regenerar"
PC-veneno           ::= "veneno"
PC-creeper          ::= "creeper"
PC-inventario       ::= "inventario"
PC-nether           ::= "nether"


(* TIPOS *)

tipo                ::= Type-hp
                    | Type-xp 
                    | Type-tocha 
                    | Type-livro 
                    | Type-fragmento
                    | Type-bussola
                    | Type-enum



Type-hp             ::= "hp"            (* int *)
Type-xp             ::= "xp"            (* float *)
Type-tocha          ::= "tocha"         (* boolean *) 
Type-livro          ::= "livro"         (* string *)
Type-fragmento      ::= "fragmento"     (* char *)
Type-bussola        ::= "bussola"       (* double *)
Type-enum           ::= "pocao"         (* enum *)

definicaoEnum       ::= Type-enum identificador '‚õèÔ∏è' enumerations '‚¨õ'

enumerations        ::= enumeration {enumeration}

enumeration         ::= identificador ':' (inteiro | string) ';'



(* LITERAIS *)

null                ::= PC-nether

digito              ::= 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9

lowerChar           ::= a | b | c | d | e | f | g | h | i | j | k | l | m | n | o | p | q | r | s | t | u | v | w | x | y | z

upperChar           ::= A | B | C | D | E | F | G | H | I | J | K | L | M | N | O | P | Q | R | S | T | U | V | W | X | Y | Z

charEspecial        ::=  ',' | '.' | '?' | '/' | '~' | '`'| '!' | '@' | '#' | '*' | '(' | ')' | '-' | '_' | '+' | '=' | '{' | '$' | '%' | '^' | '&' | '}' | '[' | ']' | '|' | '\' | ':' | ';' | "'" | '<' | '>'

inteiro             ::= digito {digito}

float               ::= inteiro '.' inteiro 'f'

double              ::= inteiro '.' inteiro 'd'

numero              ::= inteiro | float | double

letra               ::= lowerChar | upperChar

caractere           ::= digito | letra | charEspecial

string              ::= '"' {caractere} '"'

char                ::= "'" caractere "'"

identificador       ::= letra {letra | digito | '_'}

vetor               ::= identificador '[' expr ']'

true                ::= "acesa"

false               ::= "apagada"

booleano            ::= true | false